var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = ColorQuantization","category":"page"},{"location":"#ColorQuantization","page":"Home","title":"ColorQuantization","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for ColorQuantization.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [ColorQuantization]","category":"page"},{"location":"#ColorQuantization.KMeansQuantization","page":"Home","title":"ColorQuantization.KMeansQuantization","text":"KMeansQuantization([T=RGB,] ncolors)\n\nQuantize colors by applying the K-means method, where ncolors corresponds to the amount of clusters and output colors.\n\nThe colorspace T in which K-means are computed defaults to RGB.\n\nOptional arguments\n\nThe following keyword arguments from Clustering.jl can be specified:\n\ninit: specifies how cluster seeds are initialized\nmaxiter: maximum number of iterations\ntol:  minimal allowed change of the objective during convergence.   The algorithm is considered to be converged when the change of objective value between   consecutive iterations drops below tol.\n\nThe default values are carried over from are imported from Clustering.jl. For more details, refer to the documentation of Clustering.jl.\n\n\n\n\n\n","category":"type"},{"location":"#ColorQuantization.UniformQuantization","page":"Home","title":"ColorQuantization.UniformQuantization","text":"UniformQuantization(n::Int)\n\nQuantize colors in RGB color space by dividing each dimension of the 0 1³ RGB color cube into n equidistant steps for a total of n³ cubes of equal size. Each color in cs is then quantized to the center of the cube it is in. Only unique colors are returned. The amount of output colors is therefore bounded by n³.\n\n\n\n\n\n","category":"type"},{"location":"#ColorQuantization.quantize-Union{Tuple{T}, Tuple{AbstractArray{T}, AbstractColorQuantizer}} where T<:ColorTypes.Colorant","page":"Home","title":"ColorQuantization.quantize","text":"quantize([T,] cs, alg)\n\nApply color quantization algorithm alg to an iterable collection of Colorants, e.g. an image or any AbstractArray. The return type T can be specified and defaults to the element type of cs.\n\n\n\n\n\n","category":"method"}]
}
